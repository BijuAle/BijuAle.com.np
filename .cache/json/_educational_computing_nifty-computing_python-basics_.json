{"data":{"site":{"siteMetadata":{"author":"Biju Ale"}},"mdx":{"headings":[{"depth":1,"value":"Arithmetics"},{"depth":1,"value":"String Manipulations"},{"depth":1,"value":"List"},{"depth":1,"value":"Set"},{"depth":1,"value":"Tuple"},{"depth":1,"value":"Dictionary"},{"depth":1,"value":"Branching"},{"depth":1,"value":"Loop"},{"depth":1,"value":"Functions"},{"depth":1,"value":"Modules"},{"depth":1,"value":"File Handling"},{"depth":1,"value":"Web Scraping"},{"depth":1,"value":"Object-Orientation"}],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"date\": \"2018-03-04T00:00:00.000Z\",\n  \"title\": \"Python Basics\",\n  \"tags\": [\"Nifty Computing\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TOC = makeShortcode(\"TOC\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(TOC, {\n    headings: props.headings,\n    mdxType: \"TOC\"\n  }), mdx(\"h1\", {\n    \"id\": \"arithmetics\"\n  }, \"Arithmetics\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"python\",\n    \"terminal\": \"carbon\",\n    \"theme\": \"night-owl\",\n    \"line-numbers\": \"true\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"# Calculations achieved with numbers & arithmetic operators\\nprint(123 / 321)\\nprint(123 + 321)\\nprint(123 - 321)\\nprint(123 * 321)\\n\\n# Drop decimal i.e. round result to whole no.\\nprint(123 // 32)\\n\\n# Exponents\\nprint(3\\\\*\\\\*3)\"), \"\\n        \"), mdx(\"h1\", {\n    \"id\": \"string-manipulations\"\n  }, \"String Manipulations\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"python\",\n    \"terminal\": \"carbon\",\n    \"theme\": \"night-owl\",\n    \"line-numbers\": \"true\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"# Print as raw strin#G\\nprint(r'C:/net')\\n\\n# Escaping chars\\nprint(\\\"This is the double quote symbol - \\\\\\\"\\\\\\\"\\\")\\n\\nname = \\\"Roger Penrose\\\"\\n\\n# Print value of variable firstprint(name 5 times.\\nprint((name + '\\\\n') * 3)\\n\\n# Print 1st letter from a string\\nprint(name[0])\\n\\n# Print 1st letter from a string from right\\nprint(name[-1])\\n\\n# Print letters from of a string from 2nd to 3rd pos\\nprint(name[2:4])\\n\\n# Print letters of a string from begining to 4th pos\\nprint(name[:4])\\n\\n# Print letters of a string from 4th pos to last pos\\nprint(name[4:])\\n\\n# Print length of a string\\nprint(len(name))\\n\\n# Reverse string\\nname = \\\"George\\\"\\nname = name[::-1]\\nprint(name)\\n\\n# Strip unwanted characters\\nname = \\\"  George \\\"\\nname2 = \\\"George///\\\"\\nname = name.strip()  # prints \\\"George\\\"\\nname2 = name2.strip(\\\"/\\\")  # prints \\\"George\\\"\\nprint(name)\\nprint(name2)\"), \"\\n        \"), mdx(\"h1\", {\n    \"id\": \"list\"\n  }, \"List\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"python\",\n    \"terminal\": \"carbon\",\n    \"theme\": \"night-owl\",\n    \"line-numbers\": \"true\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"players = [12, 34, 63, 10, 8, 2]\\n\\n# Add item to the end of list\\nplayers.append(12)\\n\\n# Delete 1st two items\\nplayers[:2] = []\\n\\n# Empty list\\nplayers[:] = []\\n\\n# Iterating over list values while getting the index too\\nm = ['a', 'b', 'c', 'd']\\nfor index, value in enumerate(m):\\n    print('{0}: {1}'.format(index, value))\\n\\n# Find most frequent item\\ntest = [1, 2, 3, 4, 2, 2, 3, 1, 4, 4, 4]\\nprint(max(set(test), key=test.count))\\n\\n# List Comprehensions:\\n\\n# Get list of sqaures of first 100 numbers\\nsquares = [x**2 for x in range(1, 101)]\\nprint(squares)\\n\\n# Get remainders of squares of first 100 numbers divided by 5\\nremainders = [x**2 % 5 for x in range(1, 101)]\\nprint(remainders)\\n\\n# Get Movies with title starting with letter G\\nmovies = ['Star Wars', 'Gandhi', 'Shawshank Redemption', 'Goodwill Haunting', 'Gone with the wind', 'Rear Windows']\\nmovies2 = [title for title in movies if title.startswith('G')]\\nprint(movies2)\\n\\n# Get movies released before 2000\\nmovies = [('Star Wars', 2000), ('Gandhi', 1999), ('Shawshank Redemption', 1990), ('Goodwill Haunting', 2001), ('Gone with the wind', 1966), ('Rear Windows', 1956)]\\nmovies2 = [title for (title, year) in movies if year < 2000]\\nprint(movies2)\\n\\n# List as Vector - Scalar Multiplication\\nv = [2, -3, 1]\\nv2 = [x * 4 for x in v]\\nprint(v2)\\n\\n# Get cartesian product\\nA = [1, 3, 5, 7]\\nB = [2, 4, 6, 8]\\ncartesian_prod = [(a, b) for a in A for b in B]\\nprint(cartesian_prod)\"), \"\\n        \"), mdx(\"h1\", {\n    \"id\": \"set\"\n  }, \"Set\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"python\",\n    \"terminal\": \"carbon\",\n    \"theme\": \"night-owl\",\n    \"line-numbers\": \"true\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"def checkCart(cart, item):\\n    for i in cart:\\n        print(i)\\n\\n    if item in cart:\\n        print('No need to buy ' + item)\\n    else:\\n        print(\\\"Buy \\\" + item)\\n    print(\\\"\\\\n\\\")\\n\\n\\ncart = {\\\"cheese\\\", \\\"ham\\\", \\\"sausage\\\", \\\"milk\\\"}\\ncheckCart(cart, 'ham')\\ncheckCart(cart, 'oats')\\ncheckCart(cart, 'honey')\\ncheckCart(cart, 'cheese')\\n\\n\\n# Set operations can be performed\\nset_a = {1, 2, 3, 4, 5}\\nset_b = {2, 4, 5, 9}\\n\\n# Intersection\\nprint(set_a & set_b)\\n\\n# Difference\\nprint(set_a - set_b)\\nprint(set_b - set_a)\\n\\n# Union\\nprint(set_a | set_b)\"), \"\\n        \"), mdx(\"h1\", {\n    \"id\": \"tuple\"\n  }, \"Tuple\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"python\",\n    \"terminal\": \"carbon\",\n    \"theme\": \"night-owl\",\n    \"line-numbers\": \"true\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"# Tuple is a collection of heterogeneous data\\n\\ntuple_a = (1, 2, 'a', 'b')\\nprint(tuple_a[1])\\n\\n# Tuple can contain another tuple\\ntuple_b = (1, 2, tuple_a)\\nprint(tuple_b[2][2])\\n\"), \"\\n        \"), mdx(\"h1\", {\n    \"id\": \"dictionary\"\n  }, \"Dictionary\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"python\",\n    \"terminal\": \"carbon\",\n    \"theme\": \"night-owl\",\n    \"line-numbers\": \"true\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"classmates = {\\n    'Emma': ' is an elegant girl',\\n    'Hannibal': ' sits besides me',\\n    'Roger': ' works hard',\\n    'Yuri': ' plays baseball'}\\n\\n\\ndef getClassmates():\\n    for k, v in classmates.items():\\n        print(k + v)\\n\\n\\ngetClassmates()\\nprint(classmates['Emma'])\"), \"\\n        \"), mdx(\"h1\", {\n    \"id\": \"branching\"\n  }, \"Branching\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"python\",\n    \"terminal\": \"carbon\",\n    \"theme\": \"night-owl\",\n    \"line-numbers\": \"true\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"name = \\\"Lucy\\\"\\n\\nif name is \\\"Bucky\\\":\\n    print(\\\"Hi Bucky\\\")\\nelif name is \\\"Lucy\\\":\\n    print(\\\"Hi Lucy\\\")\\nelse:\\n    print(\\\"Please sign up.\\\")\\n\"), \"\\n        \"), mdx(\"h1\", {\n    \"id\": \"loop\"\n  }, \"Loop\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"python\",\n    \"terminal\": \"carbon\",\n    \"theme\": \"night-owl\",\n    \"line-numbers\": \"true\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"foods = ['cheese', 'bacon', 'beef', 'ham']\\n\\n\\n# for loop\\ndef func1():\\n    for n in range(10):\\n        print(n)\\n\\n\\ndef printAllFoods():\\n    for eachFood in foods:\\n        print(eachFood)\\n        print(len(eachFood))\\n\\n\\ndef printSomeFoods():\\n    for eachItem in range(5, 12, 2):  # 5 - start, 12 - end, 2 - increment\\n        print(eachItem)\\n\\n\\n# While loop\\ndef func2():\\n    danger = 2\\n    while danger < 10:\\n        print(danger, + \\\"safe\\\")  # Int - String concatenation\\n        danger += 1\\n\\n\\n# Can use Break & continue in loop\"), \"\\n        \"), mdx(\"h1\", {\n    \"id\": \"functions\"\n  }, \"Functions\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"python\",\n    \"terminal\": \"carbon\",\n    \"theme\": \"night-owl\",\n    \"line-numbers\": \"true\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"# Default value for parameter\\ndef getGender(gender=None):\\n    if gender is 'm':\\n        print('Male')\\n    elif gender is 'f':\\n        print('Female')\\n    else:\\n        print(gender)\\n\\n\\ngetGender('m')\\ngetGender('f')\\ngetGender()\\n\\n# Keyword parameters\\ndef printSentence(name='Jackson', action='makes', item='guitars'):\\n    print(name, action, item)\\n\\n\\nprintSentence()\\nprintSentence('John', 'bakes', 'pizza')\\nprintSentence('Mary')\\nprintSentence(action='repairs', name='Paul')\\n\\n\\n# Flexible parameter count\\ndef addNums(*args):\\n    sum = 0\\n    for n in args:\\n        sum += n\\n    print(sum)\\n\\n\\naddNums(2)\\naddNums(3, 44.2, 1)\\naddNums(234, 4, -5)\\n\\n# Unpacking parameters\\ndef healthCalc(args):\\n    result = (100 - args[0]) + (args[1] * 2.4) - (args[2] * 2)\\n    print(result)\\n\\n\\nargs = [23, 123, 22]\\nhealthCalc(args)\\n\\n# Returning multiple values from a function\\ndef getAString():\\n    a = \\\"George\\\"\\n    b = \\\"is\\\"\\n    c = \\\"cool\\\"\\n    return a, b, c\\n\\nsentence = getAString()\\n(a, b, c) = sentence\\nprint(a, b, c)\"), \"\\n        \"), mdx(\"h1\", {\n    \"id\": \"modules\"\n  }, \"Modules\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"python\",\n    \"terminal\": \"carbon\",\n    \"theme\": \"night-owl\",\n    \"line-numbers\": \"true\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"import dieMod\\ndef manyRolls(n):\\nstring = ''\\nfor i in range(n):\\nstring += str(dieMod.rollDie())\\nprint(string)\\nmanyRolls(6)\\n\\n#dieMod.py file:\\nimport random\\ndef rollDie():\\nreturn random.randrange(1, 6)\"), \"\\n        \"), mdx(\"h1\", {\n    \"id\": \"file-handling\"\n  }, \"File Handling\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"python\",\n    \"terminal\": \"carbon\",\n    \"theme\": \"night-owl\",\n    \"line-numbers\": \"true\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"# Writing to a file\\n\\nfw = open('sample.txt', 'w')\\nfw.write('In the beginning, God created the heavens and the earth')\\nfw.close\\n\\n# Reading from a file\\n\\nfr = open('sample.txt', 'r')\\ntext = fr.read()\\nfr.close()\\nprint(text)\\n\"), \"\\n        \"), mdx(\"h1\", {\n    \"id\": \"web-scraping\"\n  }, \"Web Scraping\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"python\",\n    \"terminal\": \"carbon\",\n    \"theme\": \"night-owl\",\n    \"line-numbers\": \"true\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"import random\\nimport requests\\nimport shutil\\n\\n\\ndef downloadImage(uri):\\n    filename = str(random.randrange(1, 10000)) + '.jpg'\\n    r = requests.get(uri, stream=True, headers={'User-agent': 'Mozilla/5.0'})\\n    if r.status_code == 200:  # request suceeds\\n        with open(filename, 'wb') as f:  # open, process, close w-write, b-binary/image\\n            r.raw.decode_content = True  # decompress file\\n            shutil.copyfileobj(r.raw, f)  # copyfileobj(source, destination)\\n\\ndownloadImage('https://images.pexels.com/photos/349758/hummingbird-bird-birds-349758.jpeg?auto=compress&cs=tinysrgb&h=350')\\n\\n# shutil - https://docs.python.org/2/library/shutil.html\\n# requests - http://docs.python-requests.org/en/master/user/quickstart/\\n# open() - https://docs.python.org/3/library/functions.html#open\\n\\n# Example 2 of Web Scraping\\nfrom urllib import request\\ngoog_url = 'http://real-cgart.finance.yahoo.com'\\n\\ndef download_stock_data(csv_url):\\n    response = request.urlopen(csv_url)\\n    csv = response.read()\\n    csv_str = str(csv)\\n    lines = csv_str.split(\\\"\\\\\\\\n\\\")\\n    dest_url = r'goog_url'\\n    fx = open(dest_url, 'w')\\n    for line in lines:\\n        fx.write(line + '\\\\n')\\n        fx. close()\\n\\ndownload_stock_data(goog_url)\"), \"\\n        \"), mdx(\"h1\", {\n    \"id\": \"object-orientation\"\n  }, \"Object-Orientation\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"python\",\n    \"terminal\": \"carbon\",\n    \"theme\": \"night-owl\",\n    \"line-numbers\": \"true\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"\\n#Example A:\\n\\nclass User:\\n'''\\nThis is a simple class in Python\\nClass User:\\n'''\\n    def __init__(self, fullName, dateOfBirth):\\n        self.fullName = fullName\\n        self.dateOfBirth = dateOfBirth\\n\\njohn = User('John Bowman', '1990.02.03')\\nprint(john.fullName)\\nprint(john.dateOfBirth)\\nhelp(User)\\n\\n#Example B\\nclass Coordinate:\\n'''\\nThis is a class for a 2d coordinate,\\n'''\\n\\n    def __init__(self, x, y):\\n        self.x = x\\n        self.y = y\\n\\n    def distance(self, other):\\n        xDiffSq = (self.x - other.x)**2\\n        yDiffSq = (self.y - other.y)**2\\n        return (xDiffSq + yDiffSq)**.5\\n\\n    def __str__(self):\\n        return '(%s,%s)' % (self.x, self.y)\\n\\nc = Coordinate(3, 1)\\no = Coordinate(2, 2)\\n\\nprint(c)\\nstr(c)\\nhelp(c)\\n\\nprint(c.distance(o))\\nprint(c.distance(o))\\n\\nimport sys\\nprint(sys.getsizeof(c))\\nprint(sys.getsizeof(o))\"), \"\\n        \"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Python Basics","date":"March 04, 2018","tags":["Nifty Computing"]},"fields":{"slug":"/educational/computing/nifty-computing/python-basics/"},"excerpt":"Arithmetics String Manipulations List Set Tuple Dictionary Branching Loop Functions Modules File Handling Web Scraping Object-Orientation"}},"pageContext":{"id":"92cf2b90-44ea-561b-8d7a-82ceb0f9f23d"}}