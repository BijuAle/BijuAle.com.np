---
layout: layouts/base.njk
title: Cloudinary Photo Uploader
---
<head>
  <script src="https://cdn.jsdelivr.net/gh/exif-heic-js/exif-heic-js/exif-heic.min.js"></script>
  <style>
    .preview-container {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-top: 20px;
    }
    .preview-item {
      position: relative;
      display: inline-block;
    }
    .preview-image {
      max-width: 200px;
      max-height: 200px;
      object-fit: cover;
      border: 2px solid #ccc;
      border-radius: 5px;
    }
    .remove-btn {
      position: absolute;
      top: -10px;
      right: -10px;
      background: red;
      color: white;
      border: none;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 12px;
    }
    .exif-data,
    .metadata {
      max-width: 200px;
      font-size: 12px;
      margin-top: 5px;
      display: flex;
      flex-direction: column;
      gap: 5px;
    }
    .exif-data label,
    .metadata label {
      font-weight: bold;
    }
    .exif-data input {
      width: 100%;
      font-size: 12px;
    }
    .metadata textarea {
      width: 100%;
      font-size: 12px;
      resize: vertical;
    }
    .upload-btn,
    .upload-all-btn,
    .remove-all-btn {
      background: #007bff;
      color: white;
      border: none;
      padding: 5px 10px;
      border-radius: 5px;
      cursor: pointer;
      margin: 5px auto;
      display: inline-block;
    }
    .remove-all-btn {
      background: red;
      margin-left: 10px;
    }
    .upload-all-btn {
      margin-bottom: 10px;
    }
    #notification {
      position: fixed;
      top: 10px;
      left: 50%;
      transform: translateX(-50%);
      background: #28a745;
      color: white;
      padding: 10px 20px;
      border-radius: 5px;
      display: none;
      z-index: 1000;
    }
    #notification.error {
      background: #dc3545;
    }
  </style>
</head>
<body>
  <div id="notification"></div>
  <label for="cloudinary-name">Cloudinary Name</label>
  <input
    type="text"
    name="cloudinary-name"
    id="cloudinary-name"
    value="bijuale"
  /><br />
  <label for="unsigned-preset">Unsigned Preset</label>
  <input
    type="text"
    name="unsigned-preset"
    id="unsigned-preset"
    value="bijuale"
  /><br />
  <button class="upload-all-btn" id="uploadAllBtn" style="display: none">
    Upload All
  </button>
  <button class="remove-all-btn" id="removeAllBtn" style="display: none">
    Remove All
  </button>
  <input type="file" id="imageInput" accept="image/*,.heic" multiple />
  <div id="preview" class="preview-container"></div>

  <script>
    const imageInput = document.getElementById("imageInput");
    const preview = document.getElementById("preview");
    const uploadAllBtn = document.getElementById("uploadAllBtn");
    const removeAllBtn = document.getElementById("removeAllBtn");
    const cloudinaryName = document.getElementById("cloudinary-name");
    const unsignedPreset = document.getElementById("unsigned-preset");
    const notification = document.getElementById("notification");
    let selectedFiles = [];

    // Function to show notification
    function showNotification(message, isError = false) {
      notification.textContent = message;
      notification.className = isError ? "error" : "";
      notification.style.display = "block";
      setTimeout(() => {
        notification.style.display = "none";
      }, 3000);
    }

    // Function to format EXIF date to readable format
    function formatExifDate(dateString) {
      if (!dateString) return "Unknown";
      const parts = dateString.split(" ");
      if (parts.length !== 2) return "Unknown";
      const [date, time] = parts;
      const [year, month, day] = date.split(":").map(Number);
      const [hour, minute, second] = time.split(":").map(Number);
      const jsDate = new Date(year, month - 1, day, hour, minute, second);
      const days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
      const months = [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec",
      ];
      let hr = jsDate.getHours();
      const ampm = hr >= 12 ? "pm" : "am";
      hr = hr % 12 || 12;
      return `${jsDate.getFullYear()} ${months[jsDate.getMonth()]} ${String(
        jsDate.getDate()
      ).padStart(2, "0")}, ${days[jsDate.getDay()]}, ${hr}:${String(
        jsDate.getMinutes()
      ).padStart(2, "0")} ${ampm}`;
    }

    // Function to convert DMS to Decimal Degrees
    function convertDMSToDecimal(degrees, minutes, seconds, direction) {
      let decimal = degrees + minutes / 60 + seconds / 3600;
      if (direction === "S" || direction === "W") {
        decimal = -decimal;
      }
      return decimal.toFixed(6);
    }

    // Function to format GPS for Google Maps
    function formatGPSForGoogleMaps(
      latitudeComponents,
      latitudeRef,
      longitudeComponents,
      longitudeRef
    ) {
      if (
        !latitudeComponents ||
        !latitudeRef ||
        !longitudeComponents ||
        !longitudeRef
      ) {
        return "No GPS data";
      }
      const lat = convertDMSToDecimal(
        latitudeComponents[0],
        latitudeComponents[1],
        latitudeComponents[2],
        latitudeRef
      );
      const lon = convertDMSToDecimal(
        longitudeComponents[0],
        longitudeComponents[1],
        longitudeComponents[2],
        longitudeRef
      );
      return `${lat},${lon}`;
    }

    // Function to update file input with current files
    function updateFileInput() {
      const dataTransfer = new DataTransfer();
      selectedFiles.forEach((file) => dataTransfer.items.add(file));
      imageInput.files = dataTransfer.files;
      uploadAllBtn.style.display = selectedFiles.length > 0 ? "block" : "none";
      removeAllBtn.style.display = selectedFiles.length > 0 ? "block" : "none";
    }

    // Function to upload a single image to Cloudinary
    async function uploadImage(file, previewItem) {
      const titleInput = previewItem.querySelector('[data-key="title"]');
      const descriptionInput = previewItem.querySelector(
        '[data-key="description"]'
      );
      const noteInput = previewItem.querySelector('[data-key="note"]');
      const tagsInput = previewItem.querySelector('[data-key="tags"]');
      const gpsInput = previewItem.querySelector('[data-key="gps"]');
      const isoInput = previewItem.querySelector('[data-key="ISO"]');
      const apertureInput = previewItem.querySelector(
        '[data-key="ApertureValue"]'
      );
      const focalLengthInput = previewItem.querySelector(
        '[data-key="FocalLength"]'
      );
      const shutterSpeedInput = previewItem.querySelector(
        '[data-key="ExposureTime"]'
      );
      const dateInput = previewItem.querySelector(
        '[data-key="DateTimeOriginal"]'
      );
      const makeInput = previewItem.querySelector('[data-key="Make"]');
      const modelInput = previewItem.querySelector('[data-key="Model"]');

      const tags = tagsInput.value
        .split(",")
        .map((tag) => tag.trim())
        .filter((tag) => tag);
      const formData = new FormData();
      formData.append("file", file);
      formData.append("upload_preset", unsignedPreset.value);
      formData.append("tags", tags.join(",")); // Send tags as comma-separated string
      formData.append(
        "context",
        `caption=${titleInput.value}|alt=${descriptionInput.value}|note=${noteInput.value}|gps=${gpsInput.value}|ISO=${isoInput.value}|ApertureValue=${apertureInput.value}|FocalLength=${focalLengthInput.value}|ExposureTime=${shutterSpeedInput.value}|DateTimeOriginal=${dateInput.value}|Make=${makeInput.value}|Model=${modelInput.value}`
      );

      try {
        const response = await fetch(
          `https://api.cloudinary.com/v1_1/${cloudinaryName.value}/image/upload`,
          {
            method: "POST",
            body: formData,
          }
        );
        const result = await response.json();
        if (result.secure_url) {
          showNotification(
            `Image ${titleInput.value || file.name} uploaded successfully!`
          );
          previewItem.remove();
          selectedFiles = selectedFiles.filter((f) => f !== file);
          updateFileInput();
        } else {
          showNotification(
            `Failed to upload ${titleInput.value || file.name}: ${
              result.error?.message || "Unknown error"
            }`,
            true
          );
        }
      } catch (error) {
        showNotification(
          `Error uploading ${titleInput.value || file.name}: ${error.message}`,
          true
        );
      }
    }

    // Function to upload all images
    async function uploadAllImages() {
      const previewItems = preview.querySelectorAll(".preview-item");
      for (const previewItem of previewItems) {
        const file = selectedFiles.find(
          (f) => f.name === previewItem.dataset.filename
        );
        if (file) {
          await uploadImage(file, previewItem);
        }
      }
    }

    // Function to remove all images
    function removeAllImages() {
      preview.innerHTML = "";
      selectedFiles = [];
      updateFileInput();
    }

    imageInput.addEventListener("change", function () {
      preview.innerHTML = ""; // Clear previous previews
      selectedFiles = Array.from(this.files);
      updateFileInput();

      for (const file of selectedFiles) {
        if (
          file.type.startsWith("image/") ||
          file.name.toLowerCase().endsWith(".heic")
        ) {
          const previewItem = document.createElement("div");
          previewItem.classList.add("preview-item");
          previewItem.dataset.filename = file.name;

          const img = document.createElement("img");
          img.classList.add("preview-image");
          const objectUrl = URL.createObjectURL(file);
          img.src = objectUrl;

          const removeBtn = document.createElement("button");
          removeBtn.classList.add("remove-btn");
          removeBtn.textContent = "×";
          removeBtn.addEventListener("click", () => {
            previewItem.remove();
            selectedFiles = selectedFiles.filter((f) => f !== file);
            updateFileInput();
            URL.revokeObjectURL(objectUrl);
          });

          const uploadBtn = document.createElement("button");
          uploadBtn.classList.add("upload-btn");
          uploadBtn.textContent = "Upload";
          uploadBtn.addEventListener("click", () =>
            uploadImage(file, previewItem)
          );

          const metadataDiv = document.createElement("div");
          metadataDiv.classList.add("metadata");

          const exifDiv = document.createElement("div");
          exifDiv.classList.add("exif-data");

          // Create input fields for metadata and EXIF data
          const fields = [
            {
              label: "Title",
              key: "title",
              section: "metadata",
              type: "textarea",
            },
            {
              label: "Description",
              key: "description",
              section: "metadata",
              type: "textarea",
            },
            {
              label: "Note",
              key: "note",
              section: "metadata",
              type: "textarea",
            },
            {
              label: "Tags (comma-separated)",
              key: "tags",
              section: "metadata",
              type: "textarea",
            },
            {
              label: "GPS Coordinates",
              key: "gps",
              section: "exif",
              type: "input",
            },
            { label: "ISO", key: "ISO", section: "exif", type: "input" },
            {
              label: "Aperture Value",
              key: "ApertureValue",
              section: "exif",
              type: "input",
            },
            {
              label: "Focal Length",
              key: "FocalLength",
              section: "exif",
              type: "input",
            },
            {
              label: "Shutter Speed",
              key: "ExposureTime",
              section: "exif",
              type: "input",
            },
            {
              label: "Date Taken",
              key: "DateTimeOriginal",
              section: "exif",
              type: "input",
            },
            {
              label: "Camera Make",
              key: "Make",
              section: "exif",
              type: "input",
            },
            {
              label: "Camera Model",
              key: "Model",
              section: "exif",
              type: "input",
            },
          ];

          fields.forEach((field) => {
            const div = field.section === "metadata" ? metadataDiv : exifDiv;
            const label = document.createElement("label");
            label.textContent = field.label;
            let input;
            if (field.type === "textarea") {
              input = document.createElement("textarea");
              input.rows = 4;
              input.cols = 50;
              input.dataset.key = field.key;
              if (field.key === "title") input.value = "";
            //   if (field.key === "title") input.value = file.name.split(".")[0];
            } else {
              input = document.createElement("input");
              input.type = "text";
              input.dataset.key = field.key;
            }
            div.appendChild(label);
            div.appendChild(input);
          });

          // Extract EXIF data
          const extension = file.name.toLowerCase().split(".").pop();
          const reader = new FileReader();
          reader.onload = function () {
            let tags;
            if (extension === "heic") {
              tags = findEXIFinHEIC(reader.result);
            } else {
              tags = findEXIFinJPEG(reader.result);
            }

            // Update EXIF input fields
            const gpsInput = exifDiv.querySelector('[data-key="gps"]');
            const latitudeComponents = tags["GPSLatitude"];
            const latitudeRef = tags["GPSLatitudeRef"];
            const longitudeComponents = tags["GPSLongitude"];
            const longitudeRef = tags["GPSLongitudeRef"];
            gpsInput.value = formatGPSForGoogleMaps(
              latitudeComponents,
              latitudeRef,
              longitudeComponents,
              longitudeRef
            );

            const isoInput = exifDiv.querySelector('[data-key="ISO"]');
            isoInput.value = tags["ISOSpeedRatings"] || "Unknown";

            const apertureInput = exifDiv.querySelector(
              '[data-key="ApertureValue"]'
            );
            apertureInput.value = tags["ApertureValue"]
              ? `f/${Math.pow(2, tags["ApertureValue"] / 2).toFixed(1)}`
              : "Unknown";

            const focalLengthInput = exifDiv.querySelector(
              '[data-key="FocalLength"]'
            );
            focalLengthInput.value = tags["FocalLength"]
              ? `${parseFloat(tags["FocalLength"]).toFixed(2)} mm`
              : "Unknown";

            const shutterSpeedInput = exifDiv.querySelector(
              '[data-key="ExposureTime"]'
            );
            if (tags["ExposureTime"]) {
              const exposure = parseFloat(tags["ExposureTime"]);
              shutterSpeedInput.value =
                exposure >= 1
                  ? `${exposure.toFixed(2)} s`
                  : `1/${Math.round(1 / exposure)} s`;
            } else {
              shutterSpeedInput.value = "Unknown";
            }

            const dateInput = exifDiv.querySelector(
              '[data-key="DateTimeOriginal"]'
            );
            dateInput.value = tags["DateTimeOriginal"]
              ? formatExifDate(tags["DateTimeOriginal"])
              : "Unknown";

            const makeInput = exifDiv.querySelector('[data-key="Make"]');
            makeInput.value = tags["Make"] || "Unknown";

            const modelInput = exifDiv.querySelector('[data-key="Model"]');
            modelInput.value = tags["Model"] || "Unknown";
          };
          reader.readAsArrayBuffer(file);

          previewItem.appendChild(img);
          previewItem.appendChild(removeBtn);
          previewItem.appendChild(uploadBtn);
          previewItem.appendChild(metadataDiv);
          previewItem.appendChild(exifDiv);
          preview.appendChild(previewItem);
        }
      }
    });

    uploadAllBtn.addEventListener("click", uploadAllImages);
    removeAllBtn.addEventListener("click", removeAllImages);
  </script>
</body>
