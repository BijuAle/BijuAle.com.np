{% extends 'layouts/base.njk' %}

{% block title %}
{% endblock %}

{% block content %}
<div class="page-header">
    <h1>{{ title }}</h1>
</div>
{{ content | safe }}

<div id="toc-container">
  <h2>Table of Book Categories</h2>

  <!-- Checkbox to toggle visibility of headings with 0 books -->
  <label class="checkbox" style="font-size: small;">
    <input type="checkbox" id="toggle-zero-books">
    <span>Toggle 0 Count</span>
  </label>

  <div
    id="toc"
    style="
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 10px;
      font-size: .85rem;
      margin-bottom: 2rem;
    "
  ></div>
</div>

<div id="container"></div>

<!-- DDC headings JSON -->
<script id="ddc-data" type="application/json">
  {{ ddc_headings | dump | safe }}
</script>

<!-- Books JSON -->
<script id="books-data" type="application/json">
  {{ library_thing | dump | safe }}
</script>

<style>
.toc-link[href$="0"]:not([href$="00"]) {
  margin-left: 10px;
}
.toc-link[href$="00"] {
  text-transform: uppercase;
  /* font-weight: bold; /* */
  margin-top: .5rem;
  color:black;
}
  .highlight {
    background-color: #649ab5; /* Change this color to your preference */
    transition: background-color 0.5s ease; /* Transition for smoothness */
  }

  #back-to-toc {
    position: fixed;
    right: 200px;
    bottom: 20px; 
    display: none; 
    background-color: #0056b3;
    color: #d9cece;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    z-index: 1000;
  }

  #back-to-toc:hover {
    background-color: #649ab5; /* Darker on hover */
    color: black
  }

  /* Styles for TOC */
  .toc-section {
    border-bottom: 1px solid grey; /* Bottom border for separation */
    padding-bottom: 5px;
    margin-bottom: 5px; /* Space between sections */
  }

  /* Styles for greyed out TOC entries */
  .disabled {
    color: grey; /* Grey out the text */
  }

  /* Book list styling */
  .book-item .author, .book-item .date {
    color: #9f4f4f;
  }

  .book-item .title {
    font-style: italic;
  }
</style>

<button id="back-to-toc">&#8593; Back to</br> TOC</button>

<script>
  const tocContainer = document.getElementById("toc");
  const container = document.getElementById("container");
  const ddcCategories = JSON.parse(
    document.getElementById("ddc-data").textContent
  );
  const booksData = JSON.parse(
    document.getElementById("books-data").textContent
  );

  const stickyMenuOffset = 100; // Reduced offset to account for the sticky menu

  // Initialize book lists for each DDC category
  const bookLists = {};
  for (const ddcId in ddcCategories) {
    bookLists[ddcId] = [];
  }

  // Categorize and sort books based on DDC codes, author name, and date
  Object.values(booksData).forEach((book) => {
    const bookDdcCode = book.ddc?.code?.[0];
    if (bookDdcCode) {
      const mainDdcClass = bookDdcCode.split(".")[0].slice(0, 2); // Get first two digits of DDC

      // Assign books to DDC headings by pattern
      for (const ddcId in ddcCategories) {
        if (ddcId.startsWith(mainDdcClass)) {
          bookLists[ddcId].push({
            title: book.title,
            author: book.primaryauthor || "? Author",
            date: book.date || "? Date",
            formatted: `${book.primaryauthor || "? Author"}, ${
              book.date || "? Date"
            }: ${book.title}`,
          });
          break;
        }
      }
    }
  });

  // Sort books by author name and date within each category
  for (const ddcId in bookLists) {
    bookLists[ddcId].sort((a, b) => {
      if (a.author < b.author) return -1;
      if (a.author > b.author) return 1;
      if (a.date < b.date) return -1;
      if (a.date > b.date) return 1;
      return 0;
    });
  }

  // Render TOC links and book sections with counts
  const tocLinks = [];
  for (const [ddcId, ddcWording] of Object.entries(ddcCategories)) {
    const sectionId = `section-${ddcId}`;

    // Create TOC link
    const tocLink = document.createElement("a");
    tocLink.href = `#${sectionId}`;
    tocLink.textContent = `${ddcId} ${ddcWording}`;
    tocLink.classList.add("toc-link"); // Add class for styling or future use
    tocLinks.push({ link: tocLink, id: sectionId, count: 0 });

    // Create a span for the book count
    const bookCount = bookLists[ddcId].length;
    const countSpan = document.createElement("span");
    countSpan.textContent = `(${bookCount})`; // Display the count
    countSpan.style.float = "right"; // Float it to the right
    countSpan.style.color = "#9f4f4f"; // Set the color to grey
    countSpan.style.marginLeft = "10px"; // Add some spacing

    // Append the span to the TOC link
    tocLink.appendChild(countSpan);

    // Create DDC section heading with book count
    const heading = document.createElement("h1");
    heading.id = sectionId;
    const bookCountSpan = document.createElement("span");
    bookCountSpan.textContent = `(${bookCount})`;
    bookCountSpan.style.float = "right";
    bookCountSpan.style.color = "#9f4f4f";
    heading.textContent = `${ddcId} â€“ ${ddcWording} `;
    heading.appendChild(bookCountSpan);
    heading.classList.add("toc-section"); // Add class for styling or future use
    container.appendChild(heading);

    // Create list for books under the heading
    const bookList = document.createElement("ol"); // Changed from <ul> to <ol>
    if (bookCount > 0) {
      bookLists[ddcId].forEach((bookItem) => {
        const listItem = document.createElement("li");
        listItem.classList.add("book-item");
        listItem.innerHTML = `
          <span class="author">${bookItem.author}</span> 
          <span class="date">${bookItem.date}</span>
          <span class="title">${toTitleCase(bookItem.title)}</span>`;
        bookList.appendChild(listItem);
      });
    } else {
      const noBooksMessage = document.createElement("li");
      noBooksMessage.textContent = "No books available under this category.";
      bookList.appendChild(noBooksMessage);
    }
    container.appendChild(bookList);

    // Update the count in the TOC links array
    tocLinks[tocLinks.length - 1].count = bookCount;
  }

  // Function to update visibility based on toggle state
  function updateVisibility() {
    const showZeroBooks = document.getElementById("toggle-zero-books").checked;

    tocLinks.forEach(({ link, id, count }) => {
      const sectionHeading = document.getElementById(id);
      const bookList = sectionHeading.nextElementSibling; // Get the <ol> that follows the heading

      if (count === 0 && !showZeroBooks) {
        link.classList.add("disabled"); // Grey out TOC entry
        sectionHeading.style.display = "none"; // Hide section heading
        bookList.style.display = "none"; // Hide corresponding book list
      } else {
        link.classList.remove("disabled"); // Restore normal TOC entry
        sectionHeading.style.display = "block"; // Show section heading
        bookList.style.display = "block"; // Show corresponding book list
      }
    });
  }

  // Initial visibility update
  updateVisibility();

  // Add event listener to toggle checkbox
  document
    .getElementById("toggle-zero-books")
    .addEventListener("change", updateVisibility);

  // Split TOC links across columns
  const numColumns = 2;
  const itemsPerColumn = Math.ceil(tocLinks.length / numColumns);
  for (let i = 0; i < numColumns; i++) {
    const column = document.createElement("div");
    column.style.display = "flex";
    column.style.flexDirection = "column";
    tocLinks
      .slice(i * itemsPerColumn, (i + 1) * itemsPerColumn)
      .forEach(({ link }) => {
        column.appendChild(link);
      });
    tocContainer.appendChild(column);
  }

  // Add scroll offset for headings when TOC links are clicked
  document.querySelectorAll(".toc-link").forEach((link) => {
    link.addEventListener("click", (e) => {
      e.preventDefault();
      const sectionId = link.getAttribute("href").substring(1);
      const targetElement = document.getElementById(sectionId);
      if (targetElement) {
        const topOffset =
          targetElement.getBoundingClientRect().top + window.scrollY;
        window.scrollTo({
          top: topOffset - stickyMenuOffset,
          behavior: "smooth",
        });
      }
    });
  });

  // Display back-to-toc button after scrolling down 200px
  const backToTocButton = document.getElementById("back-to-toc");
  window.onscroll = () => {
    if (window.scrollY >= 200) {
      backToTocButton.style.display = "block";
    } else {
      backToTocButton.style.display = "none";
    }
  };

  // Scroll to top of the TOC when back-to-toc is clicked
  backToTocButton.addEventListener("click", () => {
    const tocTop = tocContainer.getBoundingClientRect().top + window.scrollY;
    window.scrollTo({
      top: tocTop - stickyMenuOffset,
      behavior: "smooth",
    });
  });

  // Function to capitalize book titles
function toTitleCase(str) {

  const exceptions = [
  'and', 'or', 'but', 'for', 'nor', 'so', 'yet',
  'a', 'an', 'the', 'in', 'on', 'at', 'to', 'by', 'with',
  'as', 'of', 'about', 'against', 'between', 'into',
  'through', 'during', 'before', 'after', 'above', 'below',
  'up', 'down', 'over', 'under', 'again', 'further',
  'then', 'once', 'here', 'there', 'when', 'where', 'why',
  'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most',
  'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own',
  'same', 'so', 'than', 'too', 'very', 's'
];
  return str.split(/(\s+|[()])/).map((word, index, words) => {
    const lowerWord = word.toLowerCase();

    // Check if the word follows an opening parenthesis, a colon, or is the first/last word
    const isAfterParenthesis = index > 0 && words[index - 1] === '(';
    const isAfterColon = index > 0 && words[index - 1] === ':';

    // Capitalize the first word, the last word, or if the word is not in the exceptions list,
    // or if the word is after a parenthesis or colon
    if (index === 0 || index === words.length - 1 || 
        !exceptions.includes(lowerWord) || 
        isAfterParenthesis || 
        isAfterColon) {
      return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
    } else {
      return lowerWord;
    }
  }).join('');
}
</script>
{% endblock %}