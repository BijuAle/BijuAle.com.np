---
layout: layouts/base.njk
---

<div id="controls">
  <input type="text" id="searchInput" placeholder="Search..." />
  <select id="filterType">
    <option value="all">All</option>
    <option value="note">Notes</option>
    <option value="highlight">Highlights</option>
  </select>
  <select id="sortBy">
    <option value="title">Sort by Title</option>
    <option value="author">Sort by Author</option>
    <option value="highlights">Sort by Highlights</option>
    <option value="lastHighlighted">Sort by Last Highlighted</option>
  </select>

  <div class="pagination">
    <button id="prevPage">Previous</button>
    <span id="pageInfo"></span>
    <button id="nextPage">Next</button>
  </div>
</div>

<table id="booksTable">
  <thead>
    <tr>
      <th>Book Title</th>
      <th>Author</th>
      <th>No. of Highlights</th>
      <th>Last Highlighted</th>
    </tr>
  </thead>
  <tbody>
    {% for book in knotes %}
    <tr
      data-book="{{ book | dump | escape }}"
      onclick="window.location='/books/{{ book.bookTitle | slug }}'"
    >
      <td>{{ book.bookTitle }}</td>
      <td>{{ book.author }}</td>
      <td>{{ book.highlights.length }}</td>
      <td>{{ book.highlights[book.highlights.length - 1].dateAdded }}</td>
    </tr>
    {% endfor %}
  </tbody>
</table>

<script>
  const searchInput = document.getElementById("searchInput");
  const filterType = document.getElementById("filterType");
  const sortBy = document.getElementById("sortBy");
  const table = document.getElementById("booksTable");
  const rows = Array.from(table.querySelectorAll("tbody tr"));
  const prevPageBtn = document.getElementById("prevPage");
  const nextPageBtn = document.getElementById("nextPage");
  const pageInfo = document.getElementById("pageInfo");

  let currentPage = 1;
  const rowsPerPage = 20;

  function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
    });
  }

  function filterAndSortTable() {
    const searchTerm = searchInput.value.toLowerCase();
    const filterValue = filterType.value;
    const sortValue = sortBy.value;

    const filteredRows = rows.filter((row) => {
      const book = JSON.parse(row.dataset.book);
      const matchesSearch = Object.values(book).some((value) =>
        String(value).toLowerCase().includes(searchTerm)
      );
      const matchesFilter =
        filterValue === "all" ||
        book.highlights.some((h) => h.type === filterValue);
      return matchesSearch && matchesFilter;
    });

    filteredRows.sort((a, b) => {
      const bookA = JSON.parse(a.dataset.book);
      const bookB = JSON.parse(b.dataset.book);
      switch (sortValue) {
        case "title":
          return bookA.bookTitle.localeCompare(bookB.bookTitle);
        case "author":
          return bookA.author.localeCompare(bookB.author);
        case "highlights":
          return bookB.highlights.length - bookA.highlights.length;
        case "lastHighlighted":
          return (
            new Date(bookB.highlights[bookB.highlights.length - 1].dateAdded) -
            new Date(bookA.highlights[bookA.highlights.length - 1].dateAdded)
          );
      }
    });

    return filteredRows;
  }

  function displayTable(filteredRows) {
    const startIndex = (currentPage - 1) * rowsPerPage;
    const endIndex = startIndex + rowsPerPage;
    const displayedRows = filteredRows.slice(startIndex, endIndex);

    const tbody = table.querySelector("tbody");
    tbody.innerHTML = "";
    displayedRows.forEach((row) => {
      const book = JSON.parse(row.dataset.book);
      row.cells[3].textContent = formatDate(
        book.highlights[book.highlights.length - 1].dateAdded
      );
      tbody.appendChild(row);
    });

    updatePagination(filteredRows.length);
  }

  function updatePagination(totalRows) {
    const totalPages = Math.ceil(totalRows / rowsPerPage);
    pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;
    prevPageBtn.disabled = currentPage === 1;
    nextPageBtn.disabled = currentPage === totalPages;
  }

  function updateTable() {
    const filteredRows = filterAndSortTable();
    displayTable(filteredRows);
  }

  searchInput.addEventListener("input", () => {
    currentPage = 1;
    updateTable();
  });
  filterType.addEventListener("change", () => {
    currentPage = 1;
    updateTable();
  });
  sortBy.addEventListener("change", updateTable);

  prevPageBtn.addEventListener("click", () => {
    if (currentPage > 1) {
      currentPage--;
      updateTable();
    }
  });

  nextPageBtn.addEventListener("click", () => {
    const filteredRows = filterAndSortTable();
    const totalPages = Math.ceil(filteredRows.length / rowsPerPage);
    if (currentPage < totalPages) {
      currentPage++;
      updateTable();
    }
  });

  // Initial table setup and date formatting
  rows.forEach((row) => {
    const book = JSON.parse(row.dataset.book);
    row.cells[3].textContent = formatDate(
      book.highlights[book.highlights.length - 1].dateAdded
    );
  });
  updateTable();
</script>
