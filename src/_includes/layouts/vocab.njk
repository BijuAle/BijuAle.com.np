{% extends 'layouts/base.njk' %}

{% block title %}
{% endblock %}

{% block content %}
<div class="page-header">
  <h1>{{ title }}</h1>
</div>

<div id="vocab-area">
  <select name="vocab-select" id="vocab-select" size="10">
    {% for w in vocab %}
    <option value="{{ w.word | slug }}">{{ w.word }}</option>
    {% endfor %}
  </select>

  <div id="vocab-nav" style="text-align: center">
    <button id="prev-word">&lt; Prev</button>
    <button id="next-word">Next &gt;</button>
    <button id="random-word">Shuffle</button>

    <div style="margin-top: 0.5rem">
      <input size="15" type="text" id="word-search" placeholder="Search word" />
      <button id="btn-asc" onclick="sortSelectOptions('vocab-select', 'ascending')">
        &#x2191;AZ
      </button>
      <button id="btn-desc" onclick="sortSelectOptions('vocab-select', 'descending')">
        &#x2193;ZA
      </button>
    </div>
  </div>

  <div id="vocab-card"></div>
</div>

<script id="vocab-data" type="application/json">
  {{ vocab | dump | safe }}
</script>

<script>
  const vocabData = JSON.parse(document.getElementById("vocab-data").textContent);
  const vocabSelect = document.getElementById("vocab-select");
  const vocabCard = document.getElementById("vocab-card");
  const prevButton = document.getElementById("prev-word");
  const nextButton = document.getElementById("next-word");
  const randomButton = document.getElementById("random-word");
  const searchInput = document.getElementById("word-search");

  function displayWord(index) {
    const wordData = vocabData[index];
    vocabSelect.selectedIndex = index;

    if (wordData && wordData.details) {
      const details = wordData.details[0]; // Assuming details is an array with at least one item
      let html = `<h1 class="vocab-main-word">${details.word}</h1>`;

      if (details.phonetics && details.phonetics[0] && details.phonetics[0].text) {
        html += `<p class="phonetic">${details.phonetics[0].text}</p>`;
      }

      if (details.meanings && details.meanings.length > 0) {
        details.meanings.forEach((meaning) => {
          html += `<p class="part-of-speech">${meaning.partOfSpeech}</p>`;
          meaning.definitions.forEach((def, i) => {
            html += `<p class="definition">${i + 1}. ${def.definition}</p>`;
            if (def.example) {
              html += `<p class="example">Example: ${def.example}</p>`;
            }
          });

          if (meaning.synonyms && meaning.synonyms.length > 0) {
            html += '<p class="synonyms">Synonyms: ' + meaning.synonyms.map((s) => `<span>${s}</span>`).join(" ") + "</p>";
          }
          if (meaning.antonyms && meaning.antonyms.length > 0) {
            html += '<p class="antonyms">Antonyms: ' + meaning.antonyms.map((a) => `<span>${a}</span>`).join(" ") + "</p>";
          }
        });
      } else {
        html += `<p class="definition">No meanings available.</p>`;
      }

      vocabCard.innerHTML = html;
    } else {
      vocabCard.innerHTML = `<h1 class="vocab-main-word">${wordData.word}</h1><p>No details available.</p>`;
    }

    updateURL(wordData.word);
  }

  function updateURL(word) {
    const url = new URL(window.location);
    url.searchParams.set("word", word.toLowerCase().replace(/\s+/g, "-"));
    window.history.pushState({}, "", url);
  }

  function selectWordBySlug(slug) {
    const index = vocabData.findIndex(word => word.word.toLowerCase().replace(/\s+/g, "-") === slug);
    if (index !== -1) displayWord(index);
  }

  vocabSelect.addEventListener("change", () => displayWord(vocabSelect.selectedIndex));
  prevButton.addEventListener("click", () => {
    const newIndex = (vocabSelect.selectedIndex - 1 + vocabData.length) % vocabData.length;
    displayWord(newIndex);
  });
  nextButton.addEventListener("click", () => {
    const newIndex = (vocabSelect.selectedIndex + 1) % vocabData.length;
    displayWord(newIndex);
  });
  randomButton.addEventListener("click", () => displayWord(Math.floor(Math.random() * vocabData.length)));

  searchInput.addEventListener("input", () => {
    let searchTerm = searchInput.value.toLowerCase();
    for (let i = 0; i < vocabSelect.options.length; i++) {
      const optionText = vocabSelect.options[i].text.toLowerCase();
      if (optionText.includes(searchTerm)) {
        vocabSelect.selectedIndex = i;
        displayWord(i);
        break;
      }
    }
  });

  function sortSelectOptions(selectId, order = "ascending") {
    const select = document.getElementById(selectId);
    const optionsArray = Array.from(select.options);
    optionsArray.sort((a, b) => {
      if (order === "ascending") return a.text.toLowerCase().localeCompare(b.text.toLowerCase());
      else return b.text.toLowerCase().localeCompare(a.text.toLowerCase());
    });
    select.innerHTML = "";
    optionsArray.forEach(option => select.appendChild(option));
  }

  const urlParams = new URLSearchParams(window.location.search);
  const initialWordSlug = urlParams.get("word");
  if (initialWordSlug) selectWordBySlug(initialWordSlug);
  else displayWord(Math.floor(Math.random() * vocabData.length));
</script>

<style>
  .vocab-main-word {
    color: hsla(269, 31%, 28%, 0.808);
    font-size: 20px;
  }

  #vocab-area {
    display: grid;
    grid-template-columns: 200px auto;
    grid-template-rows: auto 1fr;
    grid-template-areas: "n c" "s c";
  }

  #vocab-select {
    grid-area: s;
    height: 300px;
  }
  #vocab-card {
    grid-area: c;
    margin-left: 20px;
  }
  #vocab-nav {
    grid-area: n;
    margin-bottom: 10px;
  }

  .phonetic {
    font-style: italic;
    color: #145145;
  }
  .part-of-speech {
    font-weight: bold;
    color: #145145;
    margin-top: 15px;
  }
  .definition {
    margin-bottom: 10px;
  }
  .example {
    font-style: italic;
    color: #145145;
  }
  .synonyms,
  .antonyms {
    margin-top: 10px;
  }
  .synonyms span,
  .antonyms span {
    display: inline-block;
    border: 1px solid rgb(144, 129, 183);
    border-radius: 5px;
    margin-left: 2px;
    padding: 2px;
  }
</style>
{% endblock %}