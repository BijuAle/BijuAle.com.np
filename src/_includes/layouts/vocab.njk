
{% extends 'layouts/base.njk' %} {% block title %}{{ title }}{% endblock %} {%
block content %}
<div class="page-header">
  <h1>{{ title }}</h1>
</div>

<div id="vocab-area">
  <div id="vocab-nav">
    <button id="prev-word">&lt; Prev</button>
    <button id="next-word">Next &gt;</button>
    <button id="random-word">Shuffle</button>

    <div class="search-sort">
      <input
        type="text"
        id="word-search"
        placeholder="Search word"
        aria-label="Search word"
      />
      <button onclick="sortSelectOptions('vocab-select', 'ascending')">
        &#x2191;AZ
      </button>
      <button onclick="sortSelectOptions('vocab-select', 'descending')">
        &#x2193;ZA
      </button>
    </div>
  </div>

  <select name="vocab-select" id="vocab-select" size="10">
    {% for w in vocab %}
    <option value="{{ w.word | slug }}">{{ w.word }}</option>
    {% endfor %}
  </select>

  <div id="vocab-card"></div>
</div>

<script id="vocab-data" type="application/json">
  {{ vocab | dump | safe }}
</script>

<script>
  const vocabData = JSON.parse(
    document.getElementById("vocab-data").textContent
  );
  const vocabSelect = document.getElementById("vocab-select");
  const vocabCard = document.getElementById("vocab-card");
  const prevButton = document.getElementById("prev-word");
  const nextButton = document.getElementById("next-word");
  const randomButton = document.getElementById("random-word");
  const searchInput = document.getElementById("word-search");

  function displayWord(index) {
    const wordData = vocabData[index];
    vocabSelect.selectedIndex = index;

    if (wordData && wordData.details) {
      const details = wordData.details[0];
      let html = `<h1 class="vocab-main-word">${details.word}</h1>`;

      if (details.phonetics?.[0]?.text) {
        html += `<p class="phonetic">${details.phonetics[0].text}</p>`;
      }

      if (details.meanings?.length) {
        details.meanings.forEach((meaning) => {
          html += `<p class="part-of-speech">${meaning.partOfSpeech}</p>`;
          meaning.definitions.forEach((def, i) => {
            html += `<p class="definition">${i + 1}. ${def.definition}</p>`;
            if (def.example) {
              html += `<p class="example">Example: ${def.example}</p>`;
            }
          });

          if (meaning.synonyms?.length) {
            html +=
              '<p class="synonyms">Synonyms: ' +
              meaning.synonyms.map((s) => `<span>${s}</span>`).join(" ") +
              "</p>";
          }
          if (meaning.antonyms?.length) {
            html +=
              '<p class="antonyms">Antonyms: ' +
              meaning.antonyms.map((a) => `<span>${a}</span>`).join(" ") +
              "</p>";
          }
        });
      } else {
        html += `<p class="definition">No meanings available.</p>`;
      }

      vocabCard.innerHTML = html;
    } else {
      vocabCard.innerHTML = `<h1 class="vocab-main-word">${wordData.word}</h1><p>No details available.</p>`;
    }

    updateURL(wordData.word);
  }

  function updateURL(word) {
    const url = new URL(window.location);
    url.searchParams.set("word", word.toLowerCase().replace(/\s+/g, "-"));
    window.history.pushState({}, "", url);
  }

  function selectWordBySlug(slug) {
    const index = vocabData.findIndex(
      (word) => word.word.toLowerCase().replace(/\s+/g, "-") === slug
    );
    if (index !== -1) displayWord(index);
  }

  vocabSelect.addEventListener("change", () =>
    displayWord(vocabSelect.selectedIndex)
  );
  prevButton.addEventListener("click", () => {
    displayWord(
      (vocabSelect.selectedIndex - 1 + vocabData.length) % vocabData.length
    );
  });
  nextButton.addEventListener("click", () => {
    displayWord((vocabSelect.selectedIndex + 1) % vocabData.length);
  });
  randomButton.addEventListener("click", () =>
    displayWord(Math.floor(Math.random() * vocabData.length))
  );

  searchInput.addEventListener("input", () => {
    let searchTerm = searchInput.value.toLowerCase();
    for (let i = 0; i < vocabSelect.options.length; i++) {
      if (vocabSelect.options[i].text.toLowerCase().includes(searchTerm)) {
        vocabSelect.selectedIndex = i;
        displayWord(i);
        break;
      }
    }
  });

  function sortSelectOptions(selectId, order = "ascending") {
    const select = document.getElementById(selectId);
    const sortedOptions = [...select.options].sort((a, b) =>
      order === "ascending"
        ? a.text.localeCompare(b.text)
        : b.text.localeCompare(a.text)
    );
    sortedOptions.forEach((option, index) => {
      select.options[index] = option;
    });
  }

  const urlParams = new URLSearchParams(window.location.search);
  const initialWordSlug = urlParams.get("word");
  if (initialWordSlug) selectWordBySlug(initialWordSlug);
  else displayWord(Math.floor(Math.random() * vocabData.length));
</script>

<style>
  /* Layout */
  #vocab-area {
    display: grid;
    grid-template-columns: 200px auto;
    grid-template-areas:
      "n c"
      "s c";
    gap: 1rem;
  }
  #vocab-nav {
    grid-area: n;
    text-align: center;
  }
  #vocab-select {
    grid-area: s;
    width: 100%;
  }
  #vocab-card {
    grid-area: c;
    background: url("../../assets/images/ep_naturalwhite.png");
    padding: 1rem;
    border-radius: 8px;
  }

  /* Mobile-friendly adjustments */
  @media (max-width: 768px) {
    #vocab-area {
      grid-template-columns: 1fr;
      grid-template-areas:
        "n"
        "s"
        "c";
    }
    #vocab-select {
      height: auto;
    }
  }

  /* Typography & colors */
  .vocab-main-word {
    color: #432c5c;
    font-size: 1.5rem;
  }
  .phonetic,
  .part-of-speech,
  .example {
    color: #145145;
  }
  .phonetic {
    font-style: italic;
  }
  .part-of-speech {
    font-weight: bold;
    margin-top: 1rem;
  }
  .definition {
    margin-bottom: 0.5rem;
  }
  .example {
    font-style: italic;
  }
  .synonyms,
  .antonyms {
    margin-top: 0.5rem;
  }
  .synonyms span,
  .antonyms span {
    display: inline-block;
    border: 1px solid #9081b7;
    border-radius: 5px;
    margin: 2px;
    padding: 2px 4px;
    font-size: 0.85rem;
  }

  /* Controls */
  button {
    flex: 1;
    padding: 0.4rem 0.6rem;
    border-radius: 5px;
    border: 1px solid #333;
    cursor: pointer;
  }
  button:hover {
    border: 1px solid #673082;
    border-radius: 10px;
    color: #333;
  }

  #word-search {
    padding: 0.4rem;
    font-size: 0.9rem;
    margin-top: 0.5rem;
    width: 100%;
    max-width: 200px;
  }
  .search-sort {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 0.25rem;
    margin-top: 0.5rem;
  }
</style>
{% endblock %}
