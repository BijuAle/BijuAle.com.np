{% extends 'layouts/base.njk' %}

{% block title %}
{% endblock %}

{% block content %}

<div class="page-header">
  <h1>{{ title }}</h1>
</div>

<div class="poem-area">
  <div class="poem-selector">
    <button class="nav-button" id="prev-button">Previous</button>
    <button class="nav-button" id="next-button">Next</button>
    <button class="nav-button" id="random-button">Shuffle</button>
    <select id="poem-select" size="20">
      {% for poem in poems %}
      <option value="{{ poem.title | slug }}">{{ poem.title }}</option>
      {% endfor %}
    </select>
  </div>

  <div class="poem-card">
    <h1 id="poem-title"></h1>
    <span id="poem-author"></span>
    <div id="poem-themes">
      <span>Themes</span>
      <ul id="theme-list"></ul>
      <!-- <span id="poem-source"></span> -->
    </div>
    <span id="poem-source"></span>
    <div id="poem-stanza"></div>
  </div>
</div>

<script id="poem-data" type="application/json">
  {{ poems | dump | safe }}
</script>

<script>
  const poemData = JSON.parse(document.getElementById("poem-data").textContent);
  const poemSelect = document.getElementById("poem-select");
  const poemTitle = document.getElementById("poem-title");
  const poemAuthor = document.getElementById("poem-author");
  const poemSource = document.getElementById("poem-source");
  const poemStanza = document.getElementById("poem-stanza");
  const themeList = document.getElementById("theme-list");

  function displayPoem(index) {
    const poem = poemData[index];
    poemTitle.textContent = poem.title;
    poemAuthor.textContent = `${poem.author} ${
      poem.datePublished ? "| " + poem.datePublished : ""
    }`;
    poemStanza.innerHTML = poem.stanzas
      .map((stanza) => `<p>${stanza.join("<br>")}</p>`)
      .join("");
    themeList.innerHTML = poem.themes
      .map((theme) => `<li>${theme}</li>`)
      .join("");

    poemSelect.value = poem.title.toLowerCase().replace(/\s+/g, "-");
    updateURL(poem.title);
  }

  function updateURL(title) {
    const url = new URL(window.location);
    url.searchParams.set("poem", title.toLowerCase().replace(/\s+/g, "-"));
    window.history.pushState({}, "", url);
  }

  function selectPoemByTitle(title) {
    const index = poemData.findIndex(
      (poem) => poem.title.toLowerCase().replace(/\s+/g, "-") === title
    );
    if (index !== -1) displayPoem(index);
  }

  poemSelect.addEventListener("change", () =>
    displayPoem(poemSelect.selectedIndex)
  );
  document.getElementById("prev-button").addEventListener("click", () => {
    const newIndex =
      (poemSelect.selectedIndex - 1 + poemData.length) % poemData.length;
    displayPoem(newIndex);
  });
  document.getElementById("next-button").addEventListener("click", () => {
    const newIndex = (poemSelect.selectedIndex + 1) % poemData.length;
    displayPoem(newIndex);
  });
  document.getElementById("random-button").addEventListener("click", () => {
    displayPoem(Math.floor(Math.random() * poemData.length));
  });

  const urlParams = new URLSearchParams(window.location.search);
  const initialPoemTitle = urlParams.get("poem");
  if (initialPoemTitle) selectPoemByTitle(initialPoemTitle);
  else displayPoem(0);
</script>

<style>
  select {
    margin-top: 0.5rem;
  }
  #poem-themes {
    display: block;
    float: right;
  }
  #poem-themes span {
    color: #333;
    /* font-weight: bold; */
  }
  #theme-list {
    margin-left: 1rem;
  }
  #theme-list li {
    opacity: 80%;
    font-family: "Garamond Italic";
    font-style: italic;
    font-size: 1.2rem;
    margin: 0.2rem;
  }
  #poem-title {
    font-size: 1.3rem;
    margin: 0;
  }
  #poem-author {
    font-style: italic;
    font-family: "Garamond Italic";
    font-size: 1.2rem;
  }
  #poem-stanza {
    margin-top: 1rem;
  }
  .poem-area {
    display: grid;
    grid-template-columns: 200px auto;
  }
  .poem-card {
    padding: 20px;
  }
  #poem-source {
    display: block;
    margin-top: 10px;
  }
</style>

{% endblock %}
